---

- name: Create script directory
  file:
    path: "{{ script_folder }}"
    state: directory
    mode: "0755"

#- name: Write the google cloud auth credentials to file from vault
#  copy:
#    content: "{{ credentials_json }}"
#    dest: "{{ script_folder }}/credentials.json"
#  become: yes
#  become_method: sudo

- name: Ensure dataset folder download directory is present
  file:
    path: "{{ dataset_folder_path }}"
    state: directory
    mode: "0755"
  become: yes
  become_method: sudo

- name: Ensure ~/.kaggle folder is present
  file:
    path: "~/.kaggle"
    state: directory
    mode: "0755"
  become: yes
  become_method: sudo

- name: Write the kaggle auth credentials to file from vault
  copy:
    content: "{{ kaggle_json }}"
    dest: "~/.kaggle/kaggle.json"
  become: yes
  become_method: sudo

- name: Install Kaggle CLI
  pip:
    name: kaggle
    state: latest
  become: yes
  become_method: sudo

- name: Download the kaggle data
  command: "kaggle competitions download -c dstl-satellite-imagery-feature-detection"
  args:
    chdir: "{{ dataset_folder_path }}"
    creates: "{{ dataset_folder_path }}/dstl-satellite-imagery-feature-detection.zip"
  become: yes
  become_method: sudo


#- name: Copy download script
#  template:
#    src: download_script.py
#    dest: "{{ script_folder }}/download_script.py"
#    mode: "0755"
#
#- name: Download files
#  include_tasks: download_file.yml
#  with_items: "{{ datasets_to_download }}"

- name: Unpackage files
  unarchive:
    src: "{{ dataset_folder_path }}/{{ item.filename }}"
    dest: "{{ dataset_folder_path }}"
    remote_src: yes
    creates: "{{ dataset_folder_path }}/{{ item.filename | regex_replace('.tgz', '') }}"
  with_items: "{{ datasets_to_download }}"
  when: item.filename | regex_search('.tgz') == true

#- name: Get file statuses
#  stat:
#    path: "{{ dataset_folder_path }}/{{ item.filename }}"
#  register: file_statuses
#  with_items: "{{ checksum_assert.results }}"
#  # If at least 1 file does not exist
#  when: file_statuses.results | selectattr('stat.exists', 'equalto', false) | list | length > 0


#- name: Loop over URLs and filenames and start tmux sessions, download into {{ dataset_folder_path }}
#  command: "tmux new-session -d -s {{ item.filename }} 'python3 {{ script_folder }}/download_script.py {{ dataset_folder_path }} {{ item.filename }} {{ item.url }} {{ item.sha1sum }}'"
#  become: yes
#  when: file_status.stat.exists == false
#  loop:

...